Soldier.cpp
Line 590 or so:
	void Soldier::die(SoldierDeath *death)
	{
		// This is for soldiers killed in battlescape. This fires off after the mission is over.
		// Since I don't want soldiers to actually die this wounds the character instead of killing them.
		delete _death;
		//_death = death;

		// Clean up associations
		_craft = 0;
		_psiTraining = false;
		_recentlyPromoted = false;

		//Set recovery for 'killed' soldiers
		_recovery = (_currentStats.health - ((_currentStats.stamina / (rand() % 2 + 4)) + (_currentStats.strength / (rand() % 3 + 5))) / 3);
		//Reset Stats
		_currentStats = _initialStats;
		_rank = RANK_ROOKIE;
		_kills = 0;
		//
		_equipmentLayout.clear();
	}

line 614 or so:
	void Soldier::abandon(SoldierDeath *death)
	{
		delete _death;
		_death = death;

		// Clean up associations
		_craft = 0;
		_psiTraining = false;
		_recentlyPromoted = false;
		_recovery = 0;
		for (std::vector<EquipmentLayoutItem*>::iterator i = _equipmentLayout.begin(); i != _equipmentLayout.end(); ++i)
		{
			delete *i;
		}
		_equipmentLayout.clear();
	}
	
Soldier.h
line 142 or so:
		/// abandons the soldier.
		void abandon(SoldierDeath *death);
		
DebriefingState.cpp
line 620 or so:

			if (status == STATUS_DEAD)
			{ // so this is a dead unit
				if (oldFaction == FACTION_HOSTILE && (*j)->killedBy() == FACTION_PLAYER)
				{
					addStat("STR_ALIENS_KILLED", 1, value);
				}
				else if (oldFaction == FACTION_PLAYER)
				{
					if (soldier != 0)
					{
						addStat("STR_XCOM_OPERATIVES_KILLED", 1, -value);
						for (std::vector<Soldier*>::iterator i = base->getSoldiers()->begin(); i != base->getSoldiers()->end(); ++i)
						{
							if ((*i) == soldier)
							{
								if (1 == 1)
								{
									(*j)->updateGeoscapeStats(*i);
									SoldierDeath *death = new SoldierDeath();
									(*i)->die(death);
									break;
								}
								else
								{
									(*j)->updateGeoscapeStats(*i);
									SoldierDeath *death = new SoldierDeath();
									death->setTime(*save->getTime());
									(*i)->die(death);
									save->getDeadSoldiers()->push_back(*i);
									base->getSoldiers()->erase(i);
									break;
								}
							}
						}
					}
					else
					{ // non soldier player = tank
						addStat("STR_TANKS_DESTROYED", 1, -value);
					}
				}
				else if (oldFaction == FACTION_NEUTRAL)
				{
					if ((*j)->killedBy() == FACTION_PLAYER)
						addStat("STR_CIVILIANS_KILLED_BY_XCOM_OPERATIVES", 1, -(*j)->getValue() - (2 * ((*j)->getValue() / 3)));
					else // if civilians happen to kill themselves XCOM shouldn't get penalty for it
						addStat("STR_CIVILIANS_KILLED_BY_ALIENS", 1, -(*j)->getValue());
				}
			}
			else
			{ // so this unit is not dead...
				if (oldFaction == FACTION_PLAYER)
				{
					if (((*j)->isInExitArea() && (battle->getMissionType() != "STR_BASE_DEFENSE" || success)) || !aborted)
					{ // so game is not aborted or aborted and unit is on exit area
						(*j)->postMissionProcedures(save);
						playerInExitArea++;
						if (soldier != 0)
						{
							recoverItems((*j)->getInventory(), base);
							// calculate new statString
							soldier->calcStatString(_game->getRuleset()->getStatStrings(), (Options::psiStrengthEval && _game->getSavedGame()->isResearched(_game->getRuleset()->getPsiRequirements())));
						}
						else
						{ // non soldier player = tank
							base->getItems()->addItem(type);
							RuleItem *tankRule = _game->getRuleset()->getItem(type);
							BattleItem *ammoItem = (*j)->getItem("STR_RIGHT_HAND")->getAmmoItem();
							if (!tankRule->getCompatibleAmmo()->empty() && 0 != ammoItem && 0 < ammoItem->getAmmoQuantity())
								base->getItems()->addItem(tankRule->getCompatibleAmmo()->front(), ammoItem->getAmmoQuantity());
						}
					}
					else
					{ // so game is aborted and unit is not on exit area
						addStat("STR_XCOM_OPERATIVES_MISSING_IN_ACTION", 1, -value);
						if (soldier != 0)
						{
							for (std::vector<Soldier*>::iterator i = base->getSoldiers()->begin(); i != base->getSoldiers()->end(); ++i)
							{
								if ((*i) == soldier)
								{
									if (1 == 1)
									{
										(*j)->updateGeoscapeStats(*i);
										SoldierDeath *death = new SoldierDeath();
										death->setTime(*save->getTime());
										(*i)->abandon(death);
										save->getDeadSoldiers()->push_back(*i);
										base->getSoldiers()->erase(i);
										break;
									}
									else
									{
										(*j)->updateGeoscapeStats(*i);
										SoldierDeath *death = new SoldierDeath();
										death->setTime(*save->getTime());
										(*i)->die(death);
										save->getDeadSoldiers()->push_back(*i);
										base->getSoldiers()->erase(i);
										break;
									}
								}
							}
						}
					}
				}